---
# Follow the README file to create, activate python virtual environment and install the requirement components
# ansible-playbook local/init-ubuntu.yml -K -e ansible_python_interpreter=$(which python)
- name: Standalone init Ubuntu environment playbook
  vars:
    - target_hosts: localhost
    - ansible_connection: local
    - apt_upgrade: yes
    - install_build_packages: yes
    - install_docker: no
  hosts: "{{ target_hosts }}"
  connection: "{{ ansible_connection }}"
  gather_facts: true
  become_user: root
  become_method: sudo
  tags:
    - debian
    - ubuntu

  tasks:
    - name: Start
      ansible.builtin.debug:
        msg: "{{ ansible_facts }}"
      tags:
        - never
        - debug

    - name: Skip (not fail) if OS is Debian
      ansible.builtin.fail:
        msg: ERROR! OS family is not Debian
      when: ansible_facts['os_family']|lower != 'debian'

    - name: Get deb architecture
      ansible.builtin.command:
        cmd: dpkg --print-architecture
      register: deb_architecture

    - name: Update OS
      block:
        - name: Add all apt repositories
          ansible.builtin.command:
            cmd: "add-apt-repository -s -y {{ item }}"
          with_items:
            - main
            - universe
            - restricted
            - multiverse

        - name: Performs an aptitude dist-upgrade
          ansible.builtin.apt:
            update_cache: yes
            cache_valid_time: 3600
            upgrade: dist
            clean: true
            autoclean: true
            force_apt_get: yes
          when: apt_upgrade|bool

        - name: Check reboot is required
          ansible.builtin.stat:
            path: /var/run/reboot-required
            get_checksum: no
          register: reboot_required_file

        - name: Reboot if required (kernel updated)
          ansible.builtin.reboot:
            msg: "Reboot required"
            connect_timeout: 5
            reboot_timeout: 300
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: uptime
          when: reboot_required_file.stat.exists
      become: yes

    - name: Install common packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - nano
        - vim
        - curl
        - wget
        - net-tools
        - traceroute
        - telnet
        - ntp
        - openssh-server
        - openssh-client
        - zip
        - tar
        - git
        - software-properties-common
        - ca-certificates
        - gnupg
      become: yes

    - name: Install JDK
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - openjdk-8-jdk
        # - openjdk-11-jdk
      become: yes

    - name: Install Python and related components
      block:
        - name: Install Python
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
          with_items:
            - python3
            - python3-venv
            - python3-pip
            - python3-setuptools

        - name: Build dependencies for python3
          ansible.builtin.apt:
            name: python3
            state: build-dep
          when: install_build_packages|bool

        - name: Install packages for optional modules for building python3
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
          with_items:
            - pkg-config
            - build-essential
            - gdb
            - lcov
            - pkg-config
            - libbz2-dev
            - libffi-dev
            - libgdbm-dev
            - libgdbm-compat-dev
            - liblzma-dev
            - libncurses5-dev
            - libreadline6-dev
            - libsqlite3-dev
            - libssl-dev
            - lzma
            - lzma-dev
            - tk-dev
            - uuid-dev
            - zlib1g-dev
          when: install_build_packages|bool
      become: yes

    - name: Install packages for building git
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - dh-autoreconf
        - libcurl4-gnutls-dev
        - libexpat1-dev
        - gettext
        - libz-dev
        - libssl-dev
        - asciidoc
        - xmlto
        - docbook2x
        - install-info
      when: install_build_packages|bool
      become: yes

    - name: Update Nautilus display textual path
      ansible.builtin.command:
        cmd: gsettings set org.gnome.nautilus.preferences always-use-location-entry true

    - name: Update DNS servers
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: nameserver {{ item }}
        state: present
        insertafter: EOF
        backup: no
      with_items:
        - 8.8.8.8
        - 1.1.1.1
        - 8.8.4.4
        - 1.0.0.1
      become: yes

    - name: Install Docker
      block:
        - name: Set docker keyring file path
          ansible.builtin.set_fact:
            docker_keyring_file: /etc/apt/keyrings/docker.gpg

        - name: Setup Dockerâ€™s official GPG key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            keyring: "{{ docker_keyring_file }}"
            state: present

        - name: Setup Docker Repository
          ansible.builtin.apt_repository:
            repo: "deb [arch={{ deb_architecture.stdout }} signed-by={{ docker_keyring_file }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

        - name: Install Docker Engine
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
            update_cache: true
            force_apt_get: yes
          with_items:
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin
      when: install_docker|bool
      become: yes
